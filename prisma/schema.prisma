generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id            Int         @id @default(autoincrement())
  productName   String
  description   String
  stockQuantity Int
  productPrice  Float
  // image         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  storeId       Int
  OrderItem     OrderItem[]
  store         Store       @relation(fields: [storeId], references: [id])
}

model Store {
  id               Int             @id @default(autoincrement())
  storeName        String
  storeDescription String
  storeDzongkhag   String
  storeGewog       String
  // storeVillage     String
  merchantId       Int
  // image            String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  customerOrders   CustomerOrder[]
  products         Product[]
  merchant         Merchant        @relation(fields: [merchantId], references: [id])
}

model Merchant {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  dzongkhag String
  gewog     String
  // image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stores    Store[]
}

model Dzongkhags {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Gewog     Gewogs[]
}

model Gewogs {
  id           Int        @id @default(autoincrement())
  name         String
  dzongkhag_id Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  dzongkhag    Dzongkhags @relation(fields: [dzongkhag_id], references: [id])
}

model Customer {
  id          Int             @id @default(autoincrement())
  name        String
  email       String          @unique
  // image       String
  phoneNumber String
  dzongkhag   String
  gewog       String
  village     String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  orders      CustomerOrder[]
}

model CustomerOrder {
  id                 Int         @id @default(autoincrement())
  customerId         Int
  storeId            Int
  orderDate          DateTime    @default(now())
  fulfillmentDate    DateTime
  totalAmount        Float
  // image              String
  orderStatus        OrderStatus
  addressDescription String
  dzongkhag          String
  gewog              String
  village            String
  latitude           Float
  longitude          Float
  phoneNumber        String
  customer           Customer    @relation(fields: [customerId], references: [id])
  store              Store       @relation(fields: [storeId], references: [id])
  orderItems         OrderItem[]
  Payment            Payment[]
}

model OrderItem {
  id        Int           @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  unitPrice Int
  createdAt DateTime      @default(now())
  order     CustomerOrder @relation(fields: [orderId], references: [id])
  product   Product       @relation(fields: [productId], references: [id])
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int
  journalNumber String
  amount        Float
  // image         String
  paymentStatus Boolean
  createdAt     DateTime      @default(now())
  order         CustomerOrder @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  AWAITING_PAYMENT
  ORDER_CONFIRMED
  ORDER_PROCESSING
  IN_TRANSIT
  DELIVERED
  CANCELED
  RETURNED
  REFUND
}
